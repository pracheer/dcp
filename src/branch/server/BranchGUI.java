package branch.server;
import java.awt.TextArea;
import java.io.IOException;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/*
 * BranchGUI.java
 *
 * Created on 18 Sep, 2010, 9:21:51 AM
 */

/**
 *
 * @author Nikhil
 */
public class BranchGUI extends javax.swing.JFrame {

	public static String GUI_NAME = "G00";
	public static int GUI_id = 0;
	public static Node currNodeGUI = null;
	public static Topology tpl = null;
	public static ServerLocations sl = null;
	public static GuiNetworkWrapper gNetworkManager = null;
	
	/** Creates new form BranchGUI */
	public BranchGUI() {
		super(GUI_NAME);
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		transGroup = new javax.swing.ButtonGroup();
		messageLabel = new javax.swing.JLabel();
		submitReqestButton = new javax.swing.JButton();
		jPanel1 = new javax.swing.JPanel();
		destAcNumTextField = new javax.swing.JFormattedTextField();
		srcAcNumTextField = new javax.swing.JFormattedTextField();
		acNumTextField = new javax.swing.JFormattedTextField();
		serialNumTextField = new javax.swing.JFormattedTextField();
		acNoLabel = new javax.swing.JLabel();
		amtLabel = new javax.swing.JLabel();
		srcAcNoLabel = new javax.swing.JLabel();
		destAcNoLabel = new javax.swing.JLabel();
		serialNoLabel = new javax.swing.JLabel();
		amountTextField = new javax.swing.JFormattedTextField();
		jPanel2 = new javax.swing.JPanel();
		queryButton = new javax.swing.JRadioButton();
		withdrawButton = new javax.swing.JRadioButton();
		depositButton = new javax.swing.JRadioButton();
		transferButton = new javax.swing.JRadioButton();
		textArea = new JTextArea(5, 40);
		JScrollPane scrollPane = new JScrollPane(textArea); 
		textArea.setEditable(false);
		textArea.setLineWrap(true);
		textArea.setWrapStyleWord(true);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		messageLabel.setText("Message:");

		submitReqestButton.setText("Submit Request");
		submitReqestButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submitReqestButtonActionPerformed(evt);
			}
		});

		destAcNumTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		destAcNumTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				destAcNumTextFieldActionPerformed(evt);
			}
		});

		srcAcNumTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		srcAcNumTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				srcAcNumTextFieldActionPerformed(evt);
			}
		});

		acNumTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		acNumTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				acNumTextFieldActionPerformed(evt);
			}
		});

		serialNumTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

		acNoLabel.setText("Account Num:");

		amtLabel.setText("Amount:");

		srcAcNoLabel.setText("Source Account Num:");

		destAcNoLabel.setText("Dest Account Num:");

		serialNoLabel.setText("Serail Number:");

		amountTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		amountTextField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				amountTextFieldActionPerformed(evt);
			}
		});

		serialNumTextField.setVisible(false);
		serialNoLabel.setVisible(false);


		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel1Layout.createSequentialGroup()
										.addComponent(acNoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(amtLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
														.addComponent(serialNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
														.addComponent(destAcNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
														.addGap(15, 15, 15))
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addComponent(srcAcNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
																.addGap(15, 15, 15)))
																.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(acNumTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
																		.addComponent(destAcNumTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
																		.addComponent(amountTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
																		.addComponent(srcAcNumTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
																		.addComponent(serialNumTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))
																		.addContainerGap())
		);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(acNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(acNumTextField))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(amountTextField)
										.addGroup(jPanel1Layout.createSequentialGroup()
												.addGap(6, 6, 6)
												.addComponent(amtLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
												.addGap(18, 18, 18)
												.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(serialNumTextField)
														.addGroup(jPanel1Layout.createSequentialGroup()
																.addGap(6, 6, 6)
																.addComponent(serialNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
																.addGap(13, 13, 13)
																.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																		.addGroup(jPanel1Layout.createSequentialGroup()
																				.addGap(6, 6, 6)
																				.addComponent(srcAcNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																				.addComponent(srcAcNumTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
																				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																				.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
																						.addGroup(jPanel1Layout.createSequentialGroup()
																								.addGap(6, 6, 6)
																								.addComponent(destAcNoLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
																								.addComponent(destAcNumTextField))
																								.addContainerGap())
		);

		transGroup.add(queryButton);
		queryButton.setLabel("Query");
		queryButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				queryButtonActionPerformed(evt);
			}
		});

		transGroup.add(withdrawButton);
		withdrawButton.setLabel("Withdraw");
		withdrawButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				withdrawButtonActionPerformed(evt);
			}
		});

		transGroup.add(depositButton);
		depositButton.setLabel("Deposit");
		depositButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				depositButtonActionPerformed(evt);
			}
		});

		transGroup.add(transferButton);
		transferButton.setLabel("Transfer");
		transferButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				transferButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(jPanel2Layout.createSequentialGroup()
										.addComponent(transferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
										.addComponent(withdrawButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
										.addComponent(queryButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
										.addComponent(depositButton, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))
										.addContainerGap())
		);
		jPanel2Layout.setVerticalGroup(
				jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(depositButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(withdrawButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(queryButton)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(transferButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap())
		);

		jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {depositButton, queryButton, withdrawButton});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(32, 32, 32)
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(350, 350, 350))
						.addGroup(layout.createSequentialGroup()
								.addGap(21, 21, 21)
								.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(180, Short.MAX_VALUE))
								.addGroup(layout.createSequentialGroup()
										.addGap(14, 14, 14)
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(submitReqestButton))
												.addContainerGap(53, Short.MAX_VALUE))
												.addComponent(textArea)
		);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(24, 24, 24)
						.addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addGap(26, 26, 26)
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(33, 33, 33)
						.addComponent(submitReqestButton)
						.addGap(31, 31, 31)
						.addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)		
						.addComponent(textArea)
						.addGap(31, 31, 31)
						.addContainerGap())
		);
		textArea.setLineWrap(true);
		showOrHideFields();
		pack();
	}// </editor-fold>

	private void queryButtonActionPerformed(java.awt.event.ActionEvent evt) {
		showOrHideFields();
		textArea.setText("");
	}

	private void depositButtonActionPerformed(java.awt.event.ActionEvent evt) {
		showOrHideFields();
		textArea.setText("");
	}

	private void withdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {
		showOrHideFields();
		textArea.setText("");
	}

	private void transferButtonActionPerformed(java.awt.event.ActionEvent evt) {
		showOrHideFields();
		textArea.setText("");
	}

	private void acNumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void destAcNumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void srcAcNumTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private void amountTextFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
	}

	private boolean isSerNo(String str) {
		/*
		 * Serial Number will have following format: ^[DWTQ]: Will start with request type.
		 * [0-9]{10}+ : will have 10 numerals
		 */
		String expression = "^[DWTQ][0-9]{10}+$";
		CharSequence inputStr = str;
		Pattern pattern = Pattern.compile(expression);
		Matcher matcher = pattern.matcher(inputStr);
		if (matcher.matches()) {
			return true;
		}
		return false;
	}
	private boolean isAmount(String str) {
		/*
		 * Number: A numeric value will have following format: ^[0-9]*: May have one or more
		 * digits. \\.? : May contain an optional "." (decimal point) character.
		 * [0-9]+$ : ends with numeric digit.
		 */
		// Initialize reg ex for numeric data.
		String expression = "^[0-9]*\\.?[0-9]+$";
		CharSequence inputStr = str;
		Pattern pattern = Pattern.compile(expression);
		Matcher matcher = pattern.matcher(inputStr);
		if (matcher.matches()) {
			return true;
		}
		return false;
	}
	public boolean accBelongsToThisBranch(String accNo){
		if (GUI_id == Integer.parseInt(accNo.substring(0, 2)))
			return true;
		else 
			return false;
	}
	public static boolean isAccountNumber(String number) {
		boolean isValid = false;
		/* Number: An account value will have following format: ^[0-9][0-9]:
		 * Starts with 2 numeric digits. \\. : contain ans "." (decimal point)
		 * character. [0-9]+$ : ends with numeric digits. */
		// Initialize reg ex for numeric data.
		String expression = "^[0-9][0-9]\\.[0-9][0-9][0-9][0-9][0-9]$";
		CharSequence inputStr = number;
		Pattern pattern = Pattern.compile(expression);
		Matcher matcher = pattern.matcher(inputStr);
		if (matcher.matches()) {
			isValid = true;
		}
		return isValid;
	}  

	private void clearAllTextFields() {
		amountTextField.setText("");
		acNumTextField.setText("");
		srcAcNumTextField.setText("");
		destAcNumTextField.setText("");
		serialNumTextField.setText("");
	}

	private void showOrHideFields() {
		clearAllTextFields();
		if (depositButton.isSelected() || withdrawButton.isSelected()) {

			acNumTextField.setVisible(true);
			serialNumTextField.setVisible(false);
			amountTextField.setVisible(true);
			destAcNumTextField.setVisible(false);
			srcAcNumTextField.setVisible(false);

			acNoLabel.setVisible(true);
			serialNoLabel.setVisible(false);
			amtLabel.setVisible(true);
			destAcNoLabel.setVisible(false);
			srcAcNoLabel.setVisible(false);

		} else if (queryButton.isSelected()) {
			acNumTextField.setVisible(true);
			serialNumTextField.setVisible(false);
			amountTextField.setVisible(false);
			destAcNumTextField.setVisible(false);
			srcAcNumTextField.setVisible(false);

			acNoLabel.setVisible(true);
			serialNoLabel.setVisible(false);
			amtLabel.setVisible(false);
			destAcNoLabel.setVisible(false);
			srcAcNoLabel.setVisible(false);

		} else if (transferButton.isSelected()) {
			acNumTextField.setVisible(false);
			serialNumTextField.setVisible(false);
			amountTextField.setVisible(true);
			destAcNumTextField.setVisible(true);
			srcAcNumTextField.setVisible(true);

			acNoLabel.setVisible(false);
			serialNoLabel.setVisible(false);
			amtLabel.setVisible(true);
			destAcNoLabel.setVisible(true);
			srcAcNoLabel.setVisible(true);
		} else {
			acNumTextField.setVisible(false);
			serialNumTextField.setVisible(false);
			amountTextField.setVisible(false);
			destAcNumTextField.setVisible(false);
			srcAcNumTextField.setVisible(false);

			acNoLabel.setVisible(false);
			serialNoLabel.setVisible(false);
			amtLabel.setVisible(false);
			destAcNoLabel.setVisible(false);
			srcAcNoLabel.setVisible(false);

		}
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel acNoLabel;
	private javax.swing.JFormattedTextField acNumTextField;
	private javax.swing.JFormattedTextField amountTextField;
	private javax.swing.JLabel amtLabel;
	private javax.swing.JRadioButton depositButton;
	private javax.swing.JLabel destAcNoLabel;
	private javax.swing.JFormattedTextField destAcNumTextField;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JLabel messageLabel;
	private javax.swing.JRadioButton queryButton;
	private javax.swing.JLabel serialNoLabel;
	private javax.swing.JFormattedTextField serialNumTextField;
	private javax.swing.JLabel srcAcNoLabel;
	private javax.swing.JFormattedTextField srcAcNumTextField;
	private javax.swing.JButton submitReqestButton;
	private javax.swing.ButtonGroup transGroup;
	private javax.swing.JRadioButton transferButton;
	private javax.swing.JRadioButton withdrawButton;
	private javax.swing.JTextArea textArea;
	private javax.swing.JScrollPane scrollPane;
	// End of variables declaration

	private void submitReqestButtonActionPerformed(
			java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		String amount = amountTextField.getText() ;
		String serNo = "0" ; //serialNumTextField.getText();
		String acNo = acNumTextField.getText();
		String srcAcNo = srcAcNumTextField.getText();
		String destAcNo = destAcNumTextField.getText();
		String defaultAcNo = "00.00000"; 
		String str="";
		Trxn transaction= null;
		Message msg;
		
		/* DO NOT REORDER THE FOLLOWING FUNCTION CALLS */
		/*Checking format of the amount */
		if (!queryButton.isSelected() && !isAmount(amount)) {
			textArea.setText("Amount format incorrectly specified. Please validate.");
			return;
		}
		/*Checking format of the account number for deposit, withdraw and query */
		if (!transferButton.isSelected() && !isAccountNumber(acNo)){
			textArea.setText("Account number format incorrectly specified. Please validate.");
			return;
		}
		/*Checking format of the account numbers for transfers*/
		if (transferButton.isSelected() && (!isAccountNumber(srcAcNo)||!isAccountNumber(destAcNo)) ){
			//messageLabel.setText("Either source or destination account number incorrectly specified. Please validate.");
			textArea.setText("Either source or destination account number incorrectly specified. Please validate.");
			return;
		}
		/* Checking if query/deposit/withdraw req can be executed at this branch */
		if(!transferButton.isSelected() && !accBelongsToThisBranch(acNo)) {
			textArea.setText("Ignoring request. Specified account not managed by this branch.");
			return;
		}

		/* Checking if transfer req can be executed at this branch */
		if(transferButton.isSelected() && !accBelongsToThisBranch(srcAcNo)) {
			textArea.setText("Ignoring request. Source account not managed by this branch.");
			return;
		}
		/* Checking if transfer req can be executed at this branch */
		if(transferButton.isSelected() && srcAcNo.equalsIgnoreCase(destAcNo)) {
			textArea.setText("Ignoring request. Source account is same as destination account.");
			return;
		}
		
		if (depositButton.isSelected()) {
			transaction = new Trxn("DEPOSIT",serNo, amount, acNo, defaultAcNo, defaultAcNo);
		} else if (withdrawButton.isSelected()) {
			transaction = new Trxn("WITHDRAW",serNo, amount, acNo, defaultAcNo, defaultAcNo);
		} else if (queryButton.isSelected()) {
			transaction = new Trxn("QUERY",serNo, "0", acNo, defaultAcNo, defaultAcNo);
		} else if (transferButton.isSelected()) {
			transaction = new Trxn("TRANSFER",serNo, amount, defaultAcNo, srcAcNo, destAcNo);
		}

		msg = new Message(currNodeGUI, Message.MsgType.valueOf("REQ"), transaction, null);
		str = msg.toString();
		String response = gNetworkManager.sendGuiRequest(str);
		
		if (response == null) {
			textArea.setText("Could not connect to server. Unable to process request.");
		} else {
			String printMsg = null;
			ReturnVal returnVal = ReturnVal.parseString(response);
			printMsg = returnVal.getStatus() ? "Transaction succeeded. " : "Transaction failed. ";
			printMsg += ("   Account balance is " + returnVal.getAmt() + "\n");
			String errorMsg = returnVal.getError();
			if (errorMsg != null && !errorMsg.isEmpty() && !errorMsg.equalsIgnoreCase("null")) 
				printMsg += (returnVal.getError());
			if (!returnVal.getSer_number().equalsIgnoreCase("-1"))
				printMsg += ("\nSerial number for the transaction is " + returnVal.getSer_number());
			textArea.setText(printMsg);
			System.out.println(response);
		}
		
		clearAllTextFields();
	}
	
	public static void parseCommandLineForGUI(String[] args) throws FlagParser.FlagParseException {
		FlagParser parser = new FlagParser();
		Vector<FlagParser.Argument> parsedArguments = parser.parseFlags(args);
		String topologyFile = null;
		String serverLocationsFile = null;
		
		for (int i = 0; i < parsedArguments.size(); ++i) {
			FlagParser.Argument argument = parsedArguments.elementAt(i);
			
			try {
				if (argument.getName().equals("gid")) {
					GUI_id = Integer.parseInt(argument.getValue());
				} else if (argument.getName().equals("topology")) {
					topologyFile = argument.getValue();
				} else if (argument.getName().equals("servers")) {
					serverLocationsFile = argument.getValue();
				} else {
					throw new FlagParser.FlagParseException(
							"Unknown flag in GUI CLI: " + argument.getName());
				}
			} catch(NumberFormatException ne) {
				throw new FlagParser.FlagParseException(
						"Could not parse GUI_ID in GUI CLI. " + ne.getMessage());
			} 
		}
		
		/* Setting GUI name */
		GUI_NAME = "G" + String.format("%02d", GUI_id);
		
		/* creating GUI topology node, true means this is a GUI node */
		currNodeGUI = new Node(true, GUI_id);
		
		/* reading topology file */
		try {
			tpl = new Topology(topologyFile, currNodeGUI);
		} catch (IOException e) {
			e.printStackTrace();
			System.err.println(e.getStackTrace());
		}

		/* reading server-locations file */
		try {
			sl = new ServerLocations(serverLocationsFile);
		} catch (IOException e) {
			e.printStackTrace();
			System.err.println(e.getStackTrace());
		}
		
		
		/* creating an object for GUI's network manager to handle network requests */
		gNetworkManager = new GuiNetworkWrapper(currNodeGUI, tpl, sl);
		
	}
	
	public static void main(String args[]) {
		
		try {
			/* After parsing the command line arguments, 
			 * the branch ID for GUI is read and initialised */
			parseCommandLineForGUI(args);
		} catch (FlagParser.FlagParseException e) {
			e.printStackTrace();
			System.err.println("Unable to parse CLI for GUI");
			//System.exit(1);
		}
		
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new BranchGUI().setVisible(true);
			}
		});
	}
}



